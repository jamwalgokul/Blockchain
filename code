pragma solidity ^0.8.0;

contract VotingSystem {
    // Structure to represent a candidate
    struct Candidate {
        uint id;
        string name;
        uint voteCount;
    }

    // Mapping to store candidates
    mapping(uint => Candidate) public candidates;

    // Mapping to track whether a voter has voted
    mapping(address => bool) public voters;

    // Event to log a vote
    event Voted(uint indexed candidateId);

    // Constructor to add candidates
    constructor(string[] memory candidateNames) {
        for (uint i = 0; i < candidateNames.length; i++) {
            candidates[i] = Candidate(i, candidateNames[i], 0);
        }
    }
// Function to vote for a candidate
    function vote(uint candidateId) public {
        // Check if the voter has not voted already
        require(!voters[msg.sender], "You have already voted.");

        // Check if the candidate exists
        require(candidateId < candidates.length, "Invalid candidate.");

        // Record the vote
        candidates[candidateId].voteCount++;
        voters[msg.sender] = true;

        // Emit the Voted event
        emit Voted(candidateId);
    }

    // Function to get the total number of candidates
    function getCandidateCount() public view returns (uint) {
        return candidates.length;
    }
}
